swagger: '2.0'
info:
  description: Doing all things Albums.
  version: '1.0'
  title: Album API
  termsOfService: Terms of service
tags:
  - name: Albums
    description: Album Resource
paths:
  /albums:
    get:
      tags:
        - Albums
      summary: albums
      operationId: albumsUsingGET
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Album'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - Albums
      summary: create
      operationId: addUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: album
          description: album
          required: true
          schema:
            $ref: '#/definitions/Album'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Album'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Already Exists
          schema:
            $ref: '#/definitions/AlreadyExistsError'
  '/albums/{albumId}':
    get:
      tags:
        - Albums
      summary: album
      operationId: albumUsingGET
      produces:
        - application/json
      parameters:
        - name: albumId
          in: path
          description: ID of album to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Album'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/AlbumNotFoundError'
    put:
      tags:
        - Albums
      summary: update
      operationId: updateUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: albumId
          in: path
          description: ID of album to return
          required: true
          type: integer
          format: int64
        - in: body
          name: album
          description: album
          required: true
          schema:
            $ref: '#/definitions/Album'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Album'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/AlbumNotFoundError'
        '409':
          description: |
            * Already Exists
          schema:
            $ref: '#/definitions/AlreadyExistsError'
    delete:
      tags:
        - Albums
      summary: remove
      operationId: removeUsingDelete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: albumId
          in: path
          description: ID of album to return
          required: true
          type: integer
          format: int64
        - in: body
          name: album
          description: album
          required: true
          schema:
            $ref: '#/definitions/Album'
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/AlbumNotFoundError'
  /schemas/album:
    get:
      tags:
        - Albums
      summary: album schema
      operationId: albumSchemaUsingGET
      produces:
        - application/json
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
definitions:
  Album:
    type: object
    required:
      - artist
      - title
    properties:
      id:
        type: string
        readOnly: true
      artist:
        type: string
      genre:
        type: string
      releaseYear:
        type: string
        minLength: 4
        maxLength: 4
      title:
        type: string
      trackCount:
        type: integer
        format: int32
  AlbumNotFoundError:
    type: array
    items:
      properties:
        code:
          type: string
          enum:
            - resource-not-found
        description:
          type: string
          enum:
            - 'album could not be found for parameters {id={id}}'
  AlreadyExistsError:
    type: array
    items:
      properties:
        code:
          type: string
          enum:
            - album-failure
        subcode:
          type: string
          enum:
            - already-exists
        description:
          type: string
          enum:
            - album already exists for provided title and album.
